---
AWSTemplateFormatVersion: 2010-09-09

Parameters:
  BucketName:
    Description: S3 Bucket where Lambda source code is located
    Type: String

  KeyName:
    Description: S3 object name of zipped Lambda source code (do not include .zip extension)
    Type: String
    AllowedPattern: ^\w+$

Resources:
  PokedexApolloServerLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref BucketName
        S3Key: !Sub ${KeyName}.zip
      Description: GraphQL server via Apollo-Server-Lambda
      Handler: src/index.handler
      Role: !GetAtt PokedexLambdaExecutionRole.Arn
      Runtime: nodejs12.x

  PokedexLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: Logs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"
        - PolicyName: PokedexDatabase
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${PokedexDatabase}

  PokedexDatabase:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: N
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  PokedexAPI:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: pokedex-api

  PokedexAPIResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt PokedexAPI.RootResourceId
      RestApiId: !Ref PokedexAPI
      PathPart: graphql

  PokedexAPIMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref PokedexAPI
      ResourceId: !Ref PokedexAPIResource
      AuthorizationType: None
      HttpMethod: ANY
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PokedexApolloServerLambda.Arn}/invocations

  PokedexAPIDeployment:
    Type: "AWS::ApiGateway::Deployment"
    Properties:
      RestApiId: !PokedexAPI
      StageName: v1
    DependsOn:
      - PokedexAPIMethod

  PokedexAPILambdaExecution:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt PokedexApolloServerLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${PokedexAPI}/*

  PokedexBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: "pokedex-bucket"
      AccessControl: "PublicRead"

Outputs:
  ApiUrl:
    Description: API url of Pokedex API Resource
    Value: !Sub https://${PokedexAPI}.execute-api.${AWS::Region}.amazonaws.com/v1/graphql

  BucketUrl:
    Description: Name of public S3 bucket for storing Pokemon images
    Value: !Ref

  DatabaseTableName:
    Description: Created table name for Pokedex DynamoDB
    Value: !Ref
